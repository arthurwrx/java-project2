name: CI/CD Pipeline for Java Spring Boot

# 1 Passo - Gatilhos funcionam a partir da branch master
on:  
  push:    
    branches:      
      - master  
  pull_request:    
    branches:      
      - master

jobs:  
  build:    
    # 2.1 - Cria a imagem do ubuntu
    runs-on: ubuntu-latest    
    steps:      
      - name: Acessa o código fonte da aplicação
        uses: actions/checkout@v2      
      # 2.2 - Configura o Java 17
      - name: Configura o Java 17        
        uses: actions/setup-java@v1        
        with:          
          java-version: '17'      
      # 2.3 - Inicia o Maven
      - name: Inicia o Maven        
        uses: actions/cache@v2        
        with:          
          path: ~/.m2          
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}          
          restore-keys: |            
            ${{ runner.os }}-maven-      
      - name: Dá build no Maven        
        run: mvn clean install      
      - name: Roda os testes do Maven        
        run: mvn test  

  dockerize:    
    needs: build    
    runs-on: ubuntu-latest    
    steps:      
      - name: Acessa o código fonte da aplicação
        uses: actions/checkout@v2      
      # Configura a Build do Docker Buildx
      - name: Configura a Build do Docker Buildx        
        uses: docker/setup-buildx-action@v1      
      # Acessa as credenciais Secrets do DockerHub pelo GitHub
      - name: Acessa as credenciais do DockerHub        
        uses: docker/login-action@v1        
        with:          
          username: ${{ secrets.DOCKER_USERNAME }}          
          password: ${{ secrets.DOCKER_TOKEN }}      
      # Constroi a imagem e manda push da imagem Docker para Staging
      - name: Constroi a imagem do Docker e dá push para Staging        
        run: |          
          docker build -t arthurwrx/java-project:staging .          
          docker push arthurwrx/java-project:staging  

  deploy:    
    needs: dockerize    
    runs-on: ubuntu-latest    
    steps:      
      - name: Acessa o código fonte da aplicação
        uses: actions/checkout@v2      
      # Instala o Docker Compose
      - name: Instala o Docker Compose        
        run: |          
          sudo apt-get update          
          sudo apt-get install -y docker-compose      
      # Dá o Deploy para Staging
      - name: Deploy para Staging        
        run: |          
          echo "Deploying to Staging environment"          
          docker compose -f docker-compose.staging.yml up -d      
      # Dá Deploy para Produção
      - name: Deploy para Produção        
        run: |          
          echo "Deploying to Production environment"          
          docker compose -f docker-compose.production.yml up -d
